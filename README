**Projekta apraksts**

### **1. Risinājuma pārskats**
Šis projekts ir futbola statistikas sistēma, kas paredzēta datu apkopošanai, apstrādei un vizualizācijai. Projekts sastāv no vairākiem moduļiem, kas nodrošina datu ievadi, analīzi un rezultātu attēlošanu.

### **2. Izmantotās tehnoloģijas**
- **Programmēšanas valoda:** Python
- **Tīkla ietvars:** Flask
- **Datu glabāšanas sistēma:** SQLite
- **Datu parsēšana:** JSON
- **Lietotāja saskarne:** HTML, CSS, JavaScript

### **3. Datu glabāšana**
Dati tiek glabāti SQLite datu bāzē (fails: `football_stats.db`).
- Spēles dati tiek saglabāti tabulās, kas ietver:
  - Spēlētāju statistiku
  - Vārtu guvumus
  - Sarkanās/dzeltenās kartītes
  - Aizvietošanas
- Importētie JSON faili tiek automātiski analizēti un saglabāti tikai tad, ja tajos esošie dati nav dublēti.

### **4. Statistikas sagatavošana**
Statistika tiek aprēķināta, izmantojot Python moduļus. Galvenie aprēķini ietver:
- Populārākie vārtu guvēji
- Komandu kopējās statistikas
- Turnīra tabulas aprēķins
- Spēlētāju aizvietošanas tendences

### **5. Datu parsēšana un neparedzēti ievades dati**
Datu parsēšanas process ir strukturēts, lai nepieļautu nepareizu vai bojātu datu ievadi. Sistēma izpilda sekojošos soļus:
1. **Fails tiek atvērts un validēts** - Pārbauda, vai fails ir pareizā JSON formātā un vai tas satur derīgus datus.
2. **Datu struktūras pārbaude** - Tiek pārbaudīts, vai fails satur obligātos laukus, piemēram, "spēle", "komandas", "rezultāts".
3. **Atkārtotu datu identificēšana** - Ja fails satur jau esošus datus, tie netiek atkārtoti ievadīti datubāzē.
4. **Datu formatēšana** - Pārbauda un formatē datumus, skaitļiskās vērtības un citas prasītās vienības.
5. **Neparedzētu ievades datu apstrāde**:
   - Ja fails satur nepazīstamus laukus, tie tiek ignorēti, bet fiksēti logfailā.
   - Ja datu laukos ir nepareizas vērtības (piem., negatīvs rezultāts), sistēma izmet brīdinājumu un attiecīgos ierakstus neuzglabā.
   - Ja fails ir bojāts un nav lasāms, tas tiek pārvietots uz "failed_imports" mapi un lietotājs tiek informēts.
6. **Datu saglabāšana** - Ja visi iepriekšējie soļi ir veiksmīgi, dati tiek ievietoti datu bāzē.

### **6. Datubāzes shēma**
Datubāzes shēma ietver sekojošas tabulas:
- **Players (Spēlētāji)**: ID, vārds, vecums, komanda
- **Matches (Spēles)**: ID, datums, komandas, rezultāts
- **Goals (Vārti)**: ID, spēlētājs, spēle, laiks
- **Substitutions (Aizvietošanas)**: ID, spēlētājs, spēle, minūte, iemesls

### **7. Sistēmas darbība**
1. Lietotājs ievieto jaunus JSON failus datu mapē.
2. Sistēma automātiski atpazīst jaunus failus un pievieno tos datu bāzei.
3. Ja sistēma tiek palaista no komandrindas, tiek parādīti statistikas rezultāti.
4. Ja sistēma tiek palaista bez parametriem, tiek startēta Flask lietotāja saskarne.

### **8. Secinājumi**
Projektā izmantotā arhitektūra nodrošina efektīvu un automatizētu datu apstrādi. Sistēma ir paplašināma un var tikt pielāgota citām sporta disciplīnām vai pielietojumiem.

